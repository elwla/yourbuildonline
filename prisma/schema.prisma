// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  userName   String   @unique
  password   String
  firstName  String
  lastName   String
  role       String   @default("user")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  assignedProjects Project[]
  accounts         Account[]
  sessions         Session[]

  @@map("user")
}

model Project {
  id             Int      @id @default(autoincrement())
  name           String
  description    String
  image_url      String?
  status         String?
  assignedUserId String?
  encryptedUrl   String?   @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relaciones - CORREGIDAS
  project_images ProjectImages[]
  assignedUser   User?           @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@map("project")
}

model ProjectImages {
  id         Int      @id @default(autoincrement())
  url        String
  order      Int      @default(0)
  project_id Int
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@map("project_images")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
